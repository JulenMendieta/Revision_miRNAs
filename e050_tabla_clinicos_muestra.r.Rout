
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## e050_tabla_clinicos_muestra.r
> ## 2015-03-26 julenmendieta92@gmail.com
> ##Modificado: 2015-05-19
> ## Script para generar una tabla con el contenido de los ficheros "clinical_patient" (No esta presente en todos los canceres)
> date ()
[1] "Tue May 26 10:53:14 2015"
> Sys.info ()[c("nodename", "user")]
   nodename        user 
   "crom01" "jmendieta" 
> commandArgs ()
[1] "/opt/soft/libs/R/3.1.2_atlas/lib64/R/bin/exec/R"
[2] "-f"                                             
[3] "e050_tabla_clinicos_muestra.r"                  
[4] "--restore"                                      
[5] "--save"                                         
[6] "--no-readline"                                  
> rm (list = ls ())
> R.version.string ##"R version 3.2.0 (2015-04-16)"
[1] "R version 3.1.2 (2014-10-31)"
> 
> try (source (".job.r")); try (.job)

.job.r has been sourced

$name
[1] "tcga_download"

$dir
$dir$data
[1] "~/datos/2015/tcga_download"

$dir$code
[1] "~/trabajos/2015/tcga_download"

$dir$scripts
[1] "~/trabajos/2015/tcga_download/scripts"

$dir$docs
[1] "~/trabajos/2015/tcga_download/documents"

$dir$raw
[1] "~/datos/2015/tcga_download/data_raw"

$dir$annotation
[1] "~/datos/2015/tcga_download/data_annotation"

$dir$proces
[1] "~/datos/2015/tcga_download/data_processed"

$dir$plots
[1] "~/datos/2015/tcga_download/results/plots"

$dir$res
[1] "~/datos/2015/tcga_download/results/files"


$testmode
[1] FALSE

$dec
[1] "."

$idsep
[1] " /// "

> 
> options (width = 170)
> #options (width = 1000)
> 
> setwd (file.path (.job$dir$proces))
> 
> 
> #Ahora le añadimos los datos de biospecimen_sample
> 
> load (file.path (.job$dir$proces, "sample_info_all.RData"))   #Con esto cargamamos sample.list
> load (file.path (.job$dir$proces, "datos_clinicos_comunes.RData"))  #Con esto cargamos tablist
> 
> #Comprobamos que tengan los mismos datos
> table(names(sample.list) %in% names(tablist))

FALSE  TRUE 
    1    33 
> table(names(tablist) %in% names(sample.list))

TRUE 
  33 
> 
> #Por lo que se ve hay un tag entre los ficheros que indican el tipo de muestra, que no aparece entre los que indican los datos clinicos
> #Si no tenemos datos clínicos de él, de momento no nos interesa, por lo que lo eliminamos
> sample.list <- sample.list[names(sample.list) %in% names(tablist)]
> tag <- names(sample.list)
> 
> 
> 
> 
> #####Esta parte se me habia olvidado hacerla antes, así que si funciona ya pensare en integrarla mejor 
> #Tenemos el problema de que aqui hay IDs repetidos, así que no puedo juntar lo que obtengamops de aqui a sample.list
> #Tenemos que hacer una tabla de esto, y juntarle a ella lo de sample.list
> 
> setwd (file.path (.job$dir$raw, "clinical"))
> ficheros <- dir (pattern = "biospecimen_shipment_portion", recursive= TRUE)  #Guardamos en ficheros el stream de cada carpeta y los ficheros que contiene
> length (ficheros)
[1] 33
> 
> #Primero guardamos en datos las columans que indican la muestra, el barcode y el ID asociable a expresión de proteinas
> datos <- NULL
> for (fi in ficheros) {
+   print (fi)
+   nombres <- unlist (strsplit (readLines (fi)[1], split = "\t"))
+   #print (nombres)
+   datos0 <- read.table (fi, header = FALSE, sep = "\t", quote = "", col.names = nombres, as.is = TRUE, na.strings = "[Not Available]", skip = 2)
+   datos0[,"file"] <- fi
+   tag0 <- sapply (strsplit (sapply (strsplit (datos0[,"file"], split = "_"), function (x) x[2]), split = "\\."), function (x) x[1])
+   tag0 <- unique(tag0)
+   print (dim (datos0))
+   datos0 <- datos0[,c("bcr_sample_barcode", "shipment_portion_bcr_aliquot_barcode", "bcr_shipment_portion_uuid")]
+   try (datos[[tag0]] <- datos0)
+ }
[1] "nationwidechildrens.org_ACC.bio.Level_2.0.38.0/nationwidechildrens.org_biospecimen_shipment_portion_acc.txt"
[1] 46 13
[1] "nationwidechildrens.org_BLCA.bio.Level_2.0.31.0/nationwidechildrens.org_biospecimen_shipment_portion_blca.txt"
[1] 344  13
[1] "nationwidechildrens.org_BRCA.bio.Level_2.0.29.0/nationwidechildrens.org_biospecimen_shipment_portion_brca.txt"
[1] 1063   13
[1] "nationwidechildrens.org_CESC.bio.Level_2.0.41.0/nationwidechildrens.org_biospecimen_shipment_portion_cesc.txt"
[1] 173  13
[1] "nationwidechildrens.org_CHOL.bio.Level_2.0.10.0/nationwidechildrens.org_biospecimen_shipment_portion_chol.txt"
[1] 30 13
[1] "nationwidechildrens.org_COAD.bio.Level_2.0.27.0/nationwidechildrens.org_biospecimen_shipment_portion_coad.txt"
[1] 429  13
[1] "nationwidechildrens.org_DLBC.bio.Level_2.0.26.0/nationwidechildrens.org_biospecimen_shipment_portion_dlbc.txt"
[1] 33 13
[1] "nationwidechildrens.org_ESCA.bio.Level_2.0.38.0/nationwidechildrens.org_biospecimen_shipment_portion_esca.txt"
[1] 126  13
[1] "nationwidechildrens.org_FPPP.bio.Level_2.0.0.0/nationwidechildrens.org_biospecimen_shipment_portion_fppp.txt"
[1] 36 13
[1] "nationwidechildrens.org_GBM.bio.Level_2.0.29.0/nationwidechildrens.org_biospecimen_shipment_portion_gbm.txt"
[1] 244  13
[1] "nationwidechildrens.org_HNSC.bio.Level_2.0.26.0/nationwidechildrens.org_biospecimen_shipment_portion_hnsc.txt"
[1] 357  13
[1] "nationwidechildrens.org_KICH.bio.Level_2.0.25.0/nationwidechildrens.org_biospecimen_shipment_portion_kich.txt"
[1] 63 13
[1] "nationwidechildrens.org_KIRC.bio.Level_2.0.26.0/nationwidechildrens.org_biospecimen_shipment_portion_kirc.txt"
[1] 478  13
[1] "nationwidechildrens.org_KIRP.bio.Level_2.0.39.0/nationwidechildrens.org_biospecimen_shipment_portion_kirp.txt"
[1] 216  13
[1] "nationwidechildrens.org_LGG.bio.Level_2.0.34.0/nationwidechildrens.org_biospecimen_shipment_portion_lgg.txt"
[1] 435  13
[1] "nationwidechildrens.org_LIHC.bio.Level_2.0.43.0/nationwidechildrens.org_biospecimen_shipment_portion_lihc.txt"
[1] 184  13
[1] "nationwidechildrens.org_LUAD.bio.Level_2.0.28.0/nationwidechildrens.org_biospecimen_shipment_portion_luad.txt"
[1] 365  13
[1] "nationwidechildrens.org_LUSC.bio.Level_2.0.26.0/nationwidechildrens.org_biospecimen_shipment_portion_lusc.txt"
[1] 328  13
[1] "nationwidechildrens.org_MESO.bio.Level_2.0.30.0/nationwidechildrens.org_biospecimen_shipment_portion_meso.txt"
[1] 63 13
[1] "nationwidechildrens.org_OV.bio.Level_2.0.28.0/nationwidechildrens.org_biospecimen_shipment_portion_ov.txt"
[1] 656  13
[1] "nationwidechildrens.org_PAAD.bio.Level_2.0.41.0/nationwidechildrens.org_biospecimen_shipment_portion_paad.txt"
[1] 123  13
[1] "nationwidechildrens.org_PCPG.bio.Level_2.0.32.0/nationwidechildrens.org_biospecimen_shipment_portion_pcpg.txt"
[1] 82 13
[1] "nationwidechildrens.org_PRAD.bio.Level_2.0.39.0/nationwidechildrens.org_biospecimen_shipment_portion_prad.txt"
[1] 352  13
[1] "nationwidechildrens.org_READ.bio.Level_2.0.29.0/nationwidechildrens.org_biospecimen_shipment_portion_read.txt"
[1] 164  13
[1] "nationwidechildrens.org_SARC.bio.Level_2.0.34.0/nationwidechildrens.org_biospecimen_shipment_portion_sarc.txt"
[1] 227  13
[1] "nationwidechildrens.org_SKCM.bio.Level_2.0.36.0/nationwidechildrens.org_biospecimen_shipment_portion_skcm.txt"
[1] 355  13
[1] "nationwidechildrens.org_STAD.bio.Level_2.0.35.0/nationwidechildrens.org_biospecimen_shipment_portion_stad.txt"
[1] 392  13
[1] "nationwidechildrens.org_TGCT.bio.Level_2.0.19.0/nationwidechildrens.org_biospecimen_shipment_portion_tgct.txt"
[1] 122  13
[1] "nationwidechildrens.org_THCA.bio.Level_2.0.30.0/nationwidechildrens.org_biospecimen_shipment_portion_thca.txt"
[1] 381  13
[1] "nationwidechildrens.org_THYM.bio.Level_2.0.10.0/nationwidechildrens.org_biospecimen_shipment_portion_thym.txt"
[1] 90 13
[1] "nationwidechildrens.org_UCEC.bio.Level_2.0.27.0/nationwidechildrens.org_biospecimen_shipment_portion_ucec.txt"
[1] 440  13
[1] "nationwidechildrens.org_UCS.bio.Level_2.0.29.0/nationwidechildrens.org_biospecimen_shipment_portion_ucs.txt"
[1] 48 13
[1] "nationwidechildrens.org_UVM.bio.Level_2.0.18.0/nationwidechildrens.org_biospecimen_shipment_portion_uvm.txt"
[1] 12 13
> 
> names (datos)
 [1] "ACC"  "BLCA" "BRCA" "CESC" "CHOL" "COAD" "DLBC" "ESCA" "FPPP" "GBM"  "HNSC" "KICH" "KIRC" "KIRP" "LGG"  "LIHC" "LUAD" "LUSC" "MESO" "OV"   "PAAD" "PCPG" "PRAD"
[24] "READ" "SARC" "SKCM" "STAD" "TGCT" "THCA" "THYM" "UCEC" "UCS"  "UVM" 
> 
> #Ahora generamos x columnas libres para añadir los datos clínicos y de muestra.
> #Lo siguiente es añadir los datos de "sample_type" de sample.list a la tabla de tablist
> #En la tabla de datos clinicos tenemos el ID del paciente, pero en la de sample tenemos ese ID dos veces, cada uno por la muestra a la que pertenece
> #Esto significa que tendriamos que añadir una linea extra por cada ID que coincida para el caso en el q hay caso y control
> 
> 
> #Guardamos las cabeceras de tablist en una variable
> cols <- colnames(tablist[[names(tablist)[1]]])
> #eliminamos bcr_patients_barcode 
> print(cols[1])
[1] "bcr_patient_barcode"
> cols <- cols[-1]
> #Creamos esas columnas en sample.list
> for (t in tag) {
+   sample.list[[t]][, cols] <- NA
+   #sample.list[[t]][, "bcr_shipment_portion_uuid"] <- NA
+ }
> 
> 
> for (t in tag) {
+   #Cada vez uqe tengamos un ID en los dos sitios se le añadira la tabla de clinicos a la de sample.list. 
+   for (id in  tablist[[t]][,"bcr_patient_barcode"]) {
+     if(id %in% sample.list[[t]][,"patient"]) {
+       posidsam <- (sample.list[[t]]["patient"] == id)
+       posidtab <- (tablist[[t]][,"bcr_patient_barcode"] == id)
+       sample.list[[t]][posidsam, cols] <- tablist[[t]][posidtab, cols]
+     } 
+   }
+ }
> 
> 
> #Ahora hay que meter en datos lo de sample.list, ya que datos tiene varios ID para la misma muestra en algún punto, y nos sera mas facil
> #duplicar lo de sample.list al meterlo ent able que al reves.
> 
> #Primero:
>   #Creamos las columnas que le faltan a table. Como nos serviremos de sample, que está en las dos, no la vamos a ñadir dos veces
> cols <- colnames(sample.list[[1]])
>   #Borramos sample
> print(cols[1])
[1] "Sample"
> cols <- cols[-1]
> 
> #Comprobamos que tengan los mismos datos
> table(names(sample.list) %in% names(datos))

FALSE  TRUE 
    1    32 
> table(names(datos) %in% names(sample.list))

FALSE  TRUE 
    1    32 
> 
> #Por lo que se ve hay dos tag que no aparecen en los dos ficheros
> #Si no tenemos datos asociables a expresión de proteinas o clinicos de éllos, de momento no nos interesan, por lo que los eliminamos
> sample.list <- sample.list[names(sample.list) %in% names(datos)]
> datos <- datos[names(datos) %in% names(sample.list)]
> tag <- names(sample.list)
>   #Añadimos las columnas. 
> for (t in tag) {
+   datos[[t]][, cols] <- NA
+ }
> 
> 
>   #Ahora que ya hemos añadido todas las columnas, solo queda unir las tablas
> #Aqui si le digo q mire Sample de sample.list, lo puedo comparar con "bcr_sample_barcode"
> for (t in tag) {
+   for (muestra in datos[[t]][, "bcr_sample_barcode"]) {
+     if (muestra %in% sample.list[[t]][, "Sample"]) {
+       posidx <- datos[[t]][, "bcr_sample_barcode"] == muestra
+       posidsam <- sample.list[[t]]["Sample"] == muestra
+       datos[[t]][posidx, cols] <- sample.list[[t]][posidsam, cols]
+     }
+   }
+ }
> 
> #####
> 
> save (list = "datos", file = file.path (.job$dir$proces, "tabla_clinicos_muestra.RData"))
> 
> ###EXIT
> warnings ()
NULL
> sessionInfo ()
R version 3.1.2 (2014-10-31)
Platform: x86_64-unknown-linux-gnu (64-bit)

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     
> q ("no")
> proc.time()
   user  system elapsed 
 35.595   0.228  41.534 
